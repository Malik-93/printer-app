import { app, BrowserWindow, ipcMain } from "electron";
import rendererToMain from "./helpers/rendererToMain";
import mainToRenderer from "./helpers/mainToRenderer";
import LocalServer from "./backend/server";
import path from "path";
import fs from "fs-extra";
const appResources = app.getPath("userData");
const envFilePath = path.join(appResources, ".env");
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
const server = new LocalServer();
let setupWindow: BrowserWindow | null = null;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}
const startServer = (mainWindow: BrowserWindow) => {
  console.log("Server Starting");
  server.start(parseInt(process.env.PRT) || 9000, mainWindow);
  console.log("Server Started");
};
const stopLocalServer = () => {
  console.log("Server Stoping");
  server.close();
  console.log("Server Stopped");
};
const copyNgrokBin = async () => {
  const sourcePath = path.join(__dirname, "bin/ngrok");
  const destinationPath = path.join(appResources, "bin/ngrok");
  await fs.copy(sourcePath, destinationPath);
  await fs.chmod(destinationPath, 0o755); // Set executable permissions
  console.log("[main.ts] Ngrok binary copied to appResources directory");
};

const createMainWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });
  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  mainToRenderer(mainWindow);

  mainWindow.webContents.on("did-start-loading", stopLocalServer);
  mainWindow.webContents.on("did-stop-loading", () => startServer(mainWindow));
  // Open the DevTools.
  if (process.env.NODE_ENV === "development")
    mainWindow.webContents.openDevTools();
};
const createSetupWindow = (): void => {
  // Create the browser window.
  const setupUrl = MAIN_WINDOW_WEBPACK_ENTRY.replace(
    "main_window",
    "setup_window"
  );

  setupWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });
  // and load the index.html of the app.
  setupWindow.loadURL(setupUrl);
  // Close the input window when the main window is closed
  setupWindow.on("closed", () => {
    setupWindow = null;
    createMainWindow();
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", async () => {
  try {
    await copyNgrokBin();
    rendererToMain();
    if (fs.existsSync(envFilePath)) {
      createMainWindow();
    } else createSetupWindow();
  } catch (error) {
    console.error("Failed to copy ngrok binary:", error);
  }
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createMainWindow();
  }
});

app.on("will-continue-activity", (event) => console.log("continue activity"));

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
