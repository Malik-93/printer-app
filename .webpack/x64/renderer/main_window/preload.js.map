{"version":3,"file":"main_window/preload.js","mappings":"0GAAa,EAAAA,WAAa,CACxBC,UAAW,YACXC,YAAa,cACbC,MAAO,QACPC,YAAa,cACbC,aAAc,YACdC,mBAAoB,qBACpBC,mBAAoB,qBACpBC,oBAAqB,sBACrBC,WAAY,aACZC,cAAe,gBACfC,aAAc,eACdC,oBAAqB,sB,uYCZvB,eACA,QA8EA,EAAAC,cAAcC,kBAAkB,MAAO,IA5EvC,MACE,WAAAC,GAEEC,KAAKC,SAAWD,KAAKC,SAASC,KAAKF,MACnCA,KAAKG,WAAaH,KAAKG,WAAWD,KAAKF,MACvCA,KAAKI,MAAQJ,KAAKI,MAAMF,KAAKF,MAC7BA,KAAKK,aAAeL,KAAKK,aAAaH,KAAKF,MAC3CA,KAAKM,WAAaN,KAAKM,WAAWJ,KAAKF,MACvCA,KAAKO,iBAAmBP,KAAKO,iBAAiBL,KAAKF,MACnDA,KAAKQ,kBAAoBR,KAAKQ,kBAAkBN,KAAKF,MACrDA,KAAKS,iBAAmBT,KAAKS,iBAAiBP,KAAKF,MACnDA,KAAKU,UAAYV,KAAKU,UAAUR,KAAKF,MACrCA,KAAKW,aAAeX,KAAKW,aAAaT,KAAKF,MAC3CA,KAAKY,YAAcZ,KAAKY,YAAYV,KAAKF,MACzCA,KAAKa,mBAAqBb,KAAKa,mBAAmBX,KAAKF,KACzD,CAEA,QAAAC,CAASa,GACP,EAAAC,YAAYC,KAAK,EAAAhC,WAAWC,UAAW6B,EACzC,CAEA,UAAAX,CAAWc,GACT,EAAAF,YAAYG,GAAG,EAAAlC,WAAWE,aAAa,CAACiC,EAAOC,IAC7CH,EAASG,IAEb,CAEA,KAAAhB,CAAMiB,GACJ,EAAAN,YAAYC,KAAK,EAAAhC,WAAWG,MAAOkC,EACrC,CAEA,YAAAhB,CAAaY,GACX,EAAAF,YAAYG,GAAG,EAAAlC,WAAWI,aAAa,CAAC+B,EAAOG,KAE7CL,EAASK,EAAQ,GAErB,CAEA,UAAAhB,CAAWW,GACT,EAAAF,YAAYG,GAAG,EAAAlC,WAAWK,cAAc,CAAC8B,EAAOI,KAC9CC,QAAQC,IAAI,+BACZR,EAASM,EAAS,GAEtB,CAEA,gBAAAhB,CAAiBmB,GACf,EAAAX,YAAYY,OAAO,EAAA3C,WAAWM,mBAAoBoC,EACpD,CAEA,gBAAAjB,CAAiBQ,GACf,EAAAF,YAAYG,GAAG,EAAAlC,WAAWO,oBAAoB,CAAC4B,EAAOS,IACpDX,EAASW,IAEb,CAEA,iBAAApB,CAAkBqB,GAChB,EAAAd,YAAYY,OAAO,EAAA3C,WAAWQ,oBAAqBqC,EACrD,CAEA,SAAAnB,GACE,EAAAK,YAAYY,OAAO,EAAA3C,WAAWS,WAChC,CAEA,YAAAkB,GACE,EAAAI,YAAYY,OAAO,EAAA3C,WAAWU,cAChC,CACA,WAAAkB,GACE,EAAAG,YAAYC,KAAK,EAAAhC,WAAWW,aAC9B,CAEM,kBAAAkB,CAAmBS,G,yCACvB,aAAa,EAAAP,YAAYY,OAAO,EAAA3C,WAAWY,oBAAqB0B,EAClE,G,aC3EFQ,EAAOC,QAAUC,QAAQ,oB,GCCrBC,EAA2B,CAAC,GAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAO,EAAoBH,GAAUI,KAAKT,EAAOC,QAASD,EAAQA,EAAOC,QAASG,GAGpEJ,EAAOC,OACf,CCnB0BG,CAAoB,I","sources":["webpack://gmd-printer-app/./src/ipcs/events.ts","webpack://gmd-printer-app/./src/preload.ts","webpack://gmd-printer-app/external commonjs2 \"electron/renderer\"","webpack://gmd-printer-app/webpack/bootstrap","webpack://gmd-printer-app/webpack/startup"],"sourcesContent":["export const IPC_EVENTS = {\r\n  SET_TITLE: \"set-title\",\r\n  ON_PRINTERS: \"on-printers\",\r\n  PRINT: \"print\",\r\n  LOG_MESSAGE: \"log-message\",\r\n  ON_NGROK_URL: \"ngrok-url\",\r\n  SAVE_ENV_VARIABLES: \"save-env-variables\",\r\n  SHOW_SYSTEM_VALUES: \"show-system-values\",\r\n  DELETE_ENV_VARIABLE: \"delete-env-variable\",\r\n  RELOAD_APP: \"app-reload\",\r\n  SCAN_PRINTERS: \"scan-printers\",\r\n  SETUP_WINDOW: \"setup-window\",\r\n  CONFIRMATION_DIALOG: \"confirmation-dialog\",\r\n};\r\n","import { contextBridge, ipcRenderer } from \"electron/renderer\";\r\nimport { IPC_EVENTS } from \"./ipcs/events\";\r\n\r\nclass PreloadAPI {\r\n  constructor() {\r\n    // Initialize and bind all functions to the current instance\r\n    this.setTitle = this.setTitle.bind(this);\r\n    this.onPrinters = this.onPrinters.bind(this);\r\n    this.print = this.print.bind(this);\r\n    this.onLogMessage = this.onLogMessage.bind(this);\r\n    this.onNgrokUrl = this.onNgrokUrl.bind(this);\r\n    this.saveEnvVariables = this.saveEnvVariables.bind(this);\r\n    this.deleteEnvVariable = this.deleteEnvVariable.bind(this);\r\n    this.showSystemValues = this.showSystemValues.bind(this);\r\n    this.reloadApp = this.reloadApp.bind(this);\r\n    this.scanPrinters = this.scanPrinters.bind(this);\r\n    this.setupWindow = this.setupWindow.bind(this);\r\n    this.confirmationDialog = this.confirmationDialog.bind(this);\r\n  }\r\n\r\n  setTitle(title: string) {\r\n    ipcRenderer.send(IPC_EVENTS.SET_TITLE, title);\r\n  }\r\n\r\n  onPrinters(callback: (printers: Electron.PrinterInfo[]) => void) {\r\n    ipcRenderer.on(IPC_EVENTS.ON_PRINTERS, (event, printers) =>\r\n      callback(printers)\r\n    );\r\n  }\r\n\r\n  print(printerName: string) {\r\n    ipcRenderer.send(IPC_EVENTS.PRINT, printerName);\r\n  }\r\n\r\n  onLogMessage(callback: (message: string) => void) {\r\n    ipcRenderer.on(IPC_EVENTS.LOG_MESSAGE, (event, message) => {\r\n      // console.log(\"[preload].logMessage :\", message);\r\n      callback(message);\r\n    });\r\n  }\r\n\r\n  onNgrokUrl(callback: (ngrokUrl: string) => void) {\r\n    ipcRenderer.on(IPC_EVENTS.ON_NGROK_URL, (event, ngrokUrl) => {\r\n      console.log(\"[preload].onNgrokUrl ran...\");\r\n      callback(ngrokUrl);\r\n    });\r\n  }\r\n\r\n  saveEnvVariables(data: { [key: string]: string }) {\r\n    ipcRenderer.invoke(IPC_EVENTS.SAVE_ENV_VARIABLES, data);\r\n  }\r\n\r\n  showSystemValues(callback: (sysVals: { [key: string]: string }) => void) {\r\n    ipcRenderer.on(IPC_EVENTS.SHOW_SYSTEM_VALUES, (event, sysVals) =>\r\n      callback(sysVals)\r\n    );\r\n  }\r\n\r\n  deleteEnvVariable(key: string) {\r\n    ipcRenderer.invoke(IPC_EVENTS.DELETE_ENV_VARIABLE, key);\r\n  }\r\n\r\n  reloadApp() {\r\n    ipcRenderer.invoke(IPC_EVENTS.RELOAD_APP);\r\n  }\r\n\r\n  scanPrinters() {\r\n    ipcRenderer.invoke(IPC_EVENTS.SCAN_PRINTERS);\r\n  }\r\n  setupWindow() {\r\n    ipcRenderer.send(IPC_EVENTS.SETUP_WINDOW);\r\n  }\r\n\r\n  async confirmationDialog(message: string) {\r\n    return await ipcRenderer.invoke(IPC_EVENTS.CONFIRMATION_DIALOG, message);\r\n  }\r\n}\r\n\r\n// Instantiate and expose the API to the renderer process\r\ncontextBridge.exposeInMainWorld(\"ipc\", new PreloadAPI());\r\n","module.exports = require(\"electron/renderer\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(714);\n"],"names":["IPC_EVENTS","SET_TITLE","ON_PRINTERS","PRINT","LOG_MESSAGE","ON_NGROK_URL","SAVE_ENV_VARIABLES","SHOW_SYSTEM_VALUES","DELETE_ENV_VARIABLE","RELOAD_APP","SCAN_PRINTERS","SETUP_WINDOW","CONFIRMATION_DIALOG","contextBridge","exposeInMainWorld","constructor","this","setTitle","bind","onPrinters","print","onLogMessage","onNgrokUrl","saveEnvVariables","deleteEnvVariable","showSystemValues","reloadApp","scanPrinters","setupWindow","confirmationDialog","title","ipcRenderer","send","callback","on","event","printers","printerName","message","ngrokUrl","console","log","data","invoke","sysVals","key","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}